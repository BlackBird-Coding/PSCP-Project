(06066303 ) Problem Solving and Computer Programming
(06036118 ) Problem Solving in Information Technology
Asst. Prof. Samart Moodleah, PhD.
2023

Lecture 03
Introduction to Python

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

2

Topics: Objectives and Expected Outcomes

Objectives

Expected Outcomes

The objectives of this lecture are:

By the end of this lecture, you will be able to:

1. Brief History of Python
2. Development process:

Input, processing, and output

3. Variable and assignment statements
4. Arithmetic Operator and Orders
5. Built-In Function: print and input

3. Introduction to Python and Control Statements

1. Understand Python history
2. Understand the program development process and
its key components
3. Able to work with Python‚Äôs variables
4. Able to work Python‚Äôs arithmetic operators
5. Able to use built-in function, print and input
function, to communication with users

Problem Solving & Computer Programming/Problem Solving in Information Technology

3

1. Brief History of Python

What is Python?

ÔÇ≠Python is a programming language:

ÔÇ≠Interpreted ‚Äì most of the codes are directly executed at run-time
ÔÇ≠Python, JavaScript, Matlab, Perl, PHP, Ruby, etc.

ÔÇ≠High Level ‚Äì human readable language
if 5 > 2:
print(‚ÄúTrue‚Äù)
else:
print(‚ÄúFalse‚Äù)

ÔÇ≠General purposes ‚Äì can be used in any fields

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

4

1. Brief History of Python

Brief History of Python

ÔÇ≠Created by Guido van Rossum

ÔÇ≠Started as a hobby
ÔÇ≠Naming ‚ÄúPython‚Äù is inspired by some TV program

ÔÇ≠1st released in 1990 (30 years)
ÔÇ≠Python 2 - started in 2000

ÔÇ≠Released in mid-2010
ÔÇ≠Will lose support (security updates) in 2020

ÔÇ≠Python 3

ÔÇ≠Released in 2008
ÔÇ≠More libraries are beginning to support Python 3
ÔÇ≠Latest Version is Python 3.11.4 (as of June 2023)

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

5

1. Brief History of Python

Python for Applications
ÔÇ≠Web development

ÔÇ≠Frameworks ‚Äì Django, Web2py, Flask

ÔÇ≠Data Science/Artificial Intelligence (ML/DL)/Computer Vision

ÔÇ≠Tensorflow(G), PyTorch(FB), Keras, Theano, NumPy, SciPy, SciKit-Learn, Matplotlib

ÔÇ≠Others

ÔÇ≠Mobile Application
ÔÇ≠Internet of Things (IoT)
ÔÇ≠Game development

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

6

1. Brief History of Python

Why Python?
ÔÇ≠Popularity

ÔÇ≠ Global top 3
ÔÇ≠ Most used for introduction to computer science course in the US

ÔÇ≠Easy to learn

ÔÇ≠ Easy to get started, but take time to master everything

ÔÇ≠Resources

ÔÇ≠ Great community ‚Äì top 5 in stackoverflow.com
ÔÇ≠ Online tutorial
ÔÇ≠ Lots of tools ‚Äì IDEs, Frameworks (Web, ML, App)

ÔÇ≠Free (Open source)

https://www.tiobe.com/tiobe-index/
Websites

Popularity
(unique visitors/month)

Front-end
(Client-side)

Back-end
(Server-side)

Google.com

1,600,000,000

JavaScript,
TypeScript

C, C++, Go,
Java, Python

Facebook.com

1,100,000,000

JavaScript

Hack, PHP
(HHVM), Python, C++, Java
, Erlang, D,
XHP, Haskell

YouTube.com

1,100,000,000

JavaScript

C, C++, Python,
Java, Go

https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites
3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

7

2. Development Process: Input, Processing and Output

Designing A Program

Design the
program
Correct logic
error

ÔÇ≠A PROGRAM must be carefully designed
ÔÇ≠Think before the act.

ÔÇ≠The program is (mostly) written in High-Level Language

Test the
program

Write the
code

Correct
syntax error

ÔÇ≠Each programing language has its own rules (syntax) for writing

ÔÇ≠Designing a program can be summarized into two steps:
1. Known what tasks to do. How?

ÔÇ≠ Ask the user/customer and list the task the program must do

2. Determine the steps to do the task. How?

ÔÇ≠ Break down the steps in order to perform the task

2. Input, Output, Variable and Algorithm

Problem Solving & Computer Programming/Problem Solving in Information Technology

8

2. Development Process: Input, Processing and Output

Example. A Wage Calculator Program

ÔÇ≠Objective: Calculate and display a daily wage for an employee
ÔÇ≠Steps (to complete the tasks):
1.
2.
3.
4.

Get employee details: name, age, etc.
Get the working details: date of work, number of hours, hourly pay rate
Calculate the payment: total payment = number of working hours * hourly pay rate * payment factor
Display the result: total payment

ÔÇ≠Programming Aspect

1. Input: receive inputs and store them in the variable (Steps: 1 and 2)
2. Calculating the payment (algorithm) (Step 3)
3. Output: show the result on screen (Step 4)

2. Input, Output, Variable and Algorithm

Problem Solving & Computer Programming/Problem Solving in Information Technology

9

2. Development Process: Input, Processing and Output

Example. A Wage Calculator Program

ÔÇ≠Flowchart ‚Äì a large chart on the same page
Start

A

B

Display: ‚ÄúEnter
Employee Info‚Äù

Display: ‚ÄúEnter
Hourly Pay Rate‚Äù

Input empName

Input payRate

Display: ‚ÄúEnter
Total Working Hour‚Äù

Get Working Date/Time,
Convert date/time to payFactor

End

Set ttlPay

Input hours

=
hours*payrate*payFactor

A

B

2. Input, Output, Variable and Algorithm

Display: empName,
‚Äú total payment is ‚Äú,
+ ttlPay,
‚Äú$.‚Äù

Page #1
Problem Solving & Computer Programming/Problem Solving in Information Technology

10

2. Development Process: Input, Processing and Output

Example. A Wage Calculator Program

ÔÇ≠Flowchart ‚Äì a large chart on the different pages
Start

1

Display: ‚ÄúEnter
Employee Info‚Äù

Display: ‚ÄúEnter
Hourly Pay Rate‚Äù

Input empName

Input payRate

Display: ‚ÄúEnter
Total Working Hour‚Äù

Get Working Date/Time,
Convert date/time to payFactor

A

End

Set ttlPay

Input hours

=
hours*payRate*payFactor

2

A

2. Input, Output, Variable and Algorithm

Display: empName,
‚Äú total payment is ‚Äú,
+ ttlPay,
‚Äú$.‚Äù

Page #1

Page #2
Problem Solving & Computer Programming/Problem Solving in Information Technology

11

2. Development Process: Input, Processing and Output

Input, Variables, and Output

ÔÇ≠Computer programs typically perform the following three-step process:
1.
2.
3.

Input is received.
Some process is performed on the input.
Output is produced.

ÔÇ≠Output ‚Äì Data that is generated and displayed by the program.
ÔÇ≠Input ‚Äì Data that the program receives.
ÔÇ≠Variables ‚Äì Keep the received data in the given locations in memory.
INPUT

PROCESS

OUTPUT

Number of Hours
Hourly Pay Rate

Payment Algorithm

ttlPay = hours * payRate * payFactor

Total Payment

Pay Rate Factor
2. Input, Output, Variable and Algorithm

Problem Solving & Computer Programming/Problem Solving in Information Technology

12

3. Variables and Assignment Statements

Variables

ÔÇ≠Programs use variables to store the data in the computer‚Äôs memory to perform tasks.
ÔÇ≠Variable is a storage location in memory that is represented by a name.
ÔÇ≠Example, payrate,

x,

or y

or y is called the identifier
ÔÇ≠Variable Names ‚Äì each language has its rule for making variable names, for example
ÔÇ≠ payrate, x

ÔÇ≠Variable names must be one word, and cannot contain spaces: thisIsOK, this is not
ÔÇ≠Punctuation characters cannot be used in variable names. thisIsOK, this.is.not.OK
ÔÇ≠The first character of a variable name cannot be a number: this9isOK, 9isNotOK

2. Input, Output, Variable and Algorithm

Ok

Problem Solving & Computer Programming/Problem Solving in Information Technology

13

3. Variables and Assignment Statements

Rules of Variable Names

ÔÇ≠Each identifier (name) may not consist of

ÔÇ≠Letters, digits, and underscores, but may begin with a digit
ÔÇ≠Check these variables
is_this_ok_1
_is_this_ok_2
3_is_this_ok
__is_this_ok_4
is_this_ok____

ÔÇ≠Python is case sensitive
this_var ‚â† This_Var

3. Introduction to Python and Control Statements

Python provides a PEP-8 document that gives coding conventions
for the Python code.
Ref: https://peps.python.org/pep-0008/
Note: PEP stands for Python Enhancement Proposal
Problem Solving & Computer Programming/Problem Solving in Information Technology

14

3. Variables and Assignment Statements

Assignment Statements
ÔÇ≠Statement

ÔÇ≠A specific task to perform, for example, snippet [1] or [2]

ÔÇ≠Assignment Symbol

ÔÇ≠Symbol of assignment, for example, = or +

ÔÇ≠Assignment Statement

ÔÇ≠The entire statement, for example

means assign a 10 to a variable called x
ÔÇ≠ y = x + 20 means y is assigned the value of 20 plus the value of a variable x
ÔÇ≠ x = 10

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

15

3. Variables and Assignment Statements

Python Basic Data Types

ÔÇ≠Python uses data types to categorize values in memory.

ÔÇ≠When an integer is stored in memory, it is classified as an int.
ÔÇ≠Whole number, like -10, 0, or 49532587523

ÔÇ≠When a real number is stored in memory, it is classified as a float.
ÔÇ≠Decimal values, like -5.235, -10.0, or 49532587523.0

ÔÇ≠When a string is stored in memory, it is classified as a str.
ÔÇ≠A string is a sequence of characters within ‚Äú ‚Äù or ‚Äò ‚Äô.

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

16

4. Arithmetic Operators and Orders

Arithmetic Operators
Arithmetic Python
Operator Operation
+

Addition

-

Subtraction

*

Multiplication

**

Exponentiati
on

/

Division

MOD

Modulus

3. Introduction to Python and Control Statements

Algebraic
Expression
ùë•ùë• + 9

Python
Expression
x + 9

ùëöùëö ‚Äì ùëõùëõ

m ‚Äì n

ùë•ùë•ùë¶ùë¶

x ** y

ùëüùëü ‚àó ùë†ùë†

ùëòùëò √∑ ùëùùëù

y mod z

r * s

k / p
y % z

Description
Adds two numbers
Subtracts one number from another
Multiplies one number by another
Raises a number to a power
Divides one number by another and gives the quotient
Divides one number by another and gives the remainder

Problem Solving & Computer Programming/Problem Solving in Information Technology

17

4. Arithmetic Operators and Orders

Operator Precedence Rules
1. Parenthesis evaluate first

ÔÇ≠ Nested parentheses, such as (ùëéùëé / (ùëèùëè ‚àí ùëêùëê)), the expression in the innermost parentheses (that is, ùëèùëè ‚àí ùëêùëê)
evaluates first

2. Exponentiation operations evaluate next.

ÔÇ≠ If an expression contains several exponentiation operations, Python applies them from right to left.

3. Multiplication, division and modulus operations evaluate next.

ÔÇ≠ If an expression contains several multiplication, true-division, floor-division, and modulus operations, Python
applies them from left to right.
ÔÇ≠ Multiplication, division and modulus are ‚Äúon the same level of precedence.‚Äù

4. Addition and subtraction operations evaluate last.

ÔÇ≠ If an expression contains several addition and subtraction operations, Python applies them from left to right.
ÔÇ≠ Addition and subtraction also have the same level of precedence.

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

18

4. Arithmetic Operators and Orders

Operation‚Äôs Order Examples
Expression

Value

Explanation

5 + 2 * 4

13

5 + (2 * 4)

10 / 2 - 3

2

(10 / 2) - 3

8 + 12 * 2 - 4

28

8 + (12 * 2) ‚Äì 4

6 ‚Äì 3 * 2 + 7 - 1

6

6 ‚Äì (3 * 2 ) + 7 - 1

7 MOD 4

3

The remainder of 7/4 is 3 (7/4 = 1 + 3/4)

(2+3) ** 2 * 3 - 10 + 15

?

?

3 * (2+3) ** 2 - 10 + 15

?

?

15 - 10 + 3 * (2+3) ** 2

?

?

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

19

5. Built-In Function: print and input

Display Output with print function

ÔÇ≠A function is prewritten code that performs an operation.
ÔÇ≠Python has numerous built-in functions that perform various operations.
ÔÇ≠The print function displays output on the screen.

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

20

5. Built-In Function: print and input

Basic print Options

ÔÇ≠Using a comma-separated list of items

ÔÇ≠Repeating output with * operator

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

21

5. Built-In Function: print and input

print

Escape Sequences

Escape
Sequences

Description

\n

Insert a newline character in a string. When the string is
displayed, for each newline, move the screen cursor to
the beginning of the next line.

\t

Insert a horizontal tab. When the string is displayed, for
each tab, move the screen cursor to the next tab stop.

\\

Insert a backslash character in a string.

\‚Äù

Insert a double quote character in a string.

\‚Äô

Insert a single quote character in a string.

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

22

5. Built-In Function: print and input

Comments

ÔÇ≠Comments are explanation notes for program lines or sections.
ÔÇ≠Comments allow the Python interpreter to ignore them.
ÔÇ≠Comments are intended for people who may be reading the source code.
ÔÇ≠When Python see #, it ignores everything from that character to the end of the line.

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

23

5. Built-In Function: print and input

Get Input From the User

ÔÇ≠Programs need to read input typed by the user on the keyboard.
ÔÇ≠The built-in input function is used to read input from keyboard.
ÔÇ≠The input input function reads data that has been entered at the keyboard and returns that data, as a
string, back to the program.
ÔÇ≠The input function in an assignment statement that follows this general format:
variable = input(prompt)

ÔÇ≠ prompt is a string

that is displayed on the screen.

ÔÇ≠ The string‚Äôs purpose is to instruct the user to enter a value;

ÔÇ≠ variable is the name of a variable that references

3. Introduction to Python and Control Statements

the data that was entered on the keyboard.

Problem Solving & Computer Programming/Problem Solving in Information Technology

24

5. Built-In Function: print and input

Reading Numbers with the input function
ÔÇ≠String

ÔÇ≠Integer

ÔÇ≠Float

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

25

Summary

Understand the basics of Python programming
ÔÇ≠History and its important
ÔÇ≠Basic Python Programming

ÔÇ≠Variable naming and its convention
ÔÇ≠Assignment statements
ÔÇ≠Built-in function: print and input

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

26

Assignment

Do the 3rd Assignment

ÔÇ≠Detail is given in the Classroom

3. Introduction to Python and Control Statements

Problem Solving & Computer Programming/Problem Solving in Information Technology

27

